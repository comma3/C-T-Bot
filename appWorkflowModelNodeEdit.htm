<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0128)http://ct-us-sql01/efacs/English/Applications_HTML/appWorkflowModelNodeEdit.html -->
<HTML xmlns:evc = "http://www.efacs.com/EVC" xmlns:efacsapplet = 
"http://www.efacs.com/exel.applet.EfacsApplet" xmlns:doesfileexist = 
"http://www.efacs.com/exel.fileexist.FileExist" xmlns:doesdocumentexist = 
"http://www.efacs.com/exel.documentexist.DocumentExist" xmlns:de = 
"http://www.efacs.com/2002/DataEngine" xmlns:componentbean = 
"http://www.efacs.com/exel.componentmanager.ComponentBean"><HEAD><META 
content="IE=5.0000" http-equiv="X-UA-Compatible">

<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="appWorkflowModelNodeEdit_files/cssMain.htm">
<SCRIPT language=javascript 
src="appWorkflowModelNodeEdit_files/ssMain.js">//</SCRIPT>

<SCRIPT language=javascript>//<![CDATA[
			var m_strComponentId = "appWorkflowModelNodeEdit.xml";
			var m_strComponentVersion = "001";
			var m_blnWindowOnBeforeUnload = false;
			
			// ------ GLOBAL OBJECT VARIABLES ------------
			var objApplication, objAppTitle, objStatusBar, objDict;
			var m_strAutoTextEditor;    //tabbed dialog text editor
			var m_flgEWMSavedAndClosed = false;
			var m_objModalWindowParent;
			var m_arrChildWindows = new Array();

			
			
			var frmMain, frmTx;
			
			var tblMain, tlbVariable;
			
			var grdWorkflowModelNodeEdit;
			
			var tabdHeader;
			
			var 
				txttabdHeader, 
				grddoctabdHeader,
				tlbtabdHeader,
				ccdocImagetabdHeader,
				ccdocEnotestabdHeader,
				txtEditorViewtabdHeader,
				objDocEWMtabdHeader;
		

		var m_objFunctionalTest;
		var m_objCompanyLicence;
		
		var m_strCollectionName = "";
		var m_strRecordName = "";
		var m_strDisplayName = "";

		
		function EfacsAppletReady()
		{
			
				//
				var client = window.document.getElementById(objApplication.browser == APPLICATION_IE ? "EfacsApplet" : "EfacsAppletNN");

				if (client.readyState) { // TODO: IE only
					if (client.readyState == "4")
					{
						localSetup2();
					}
					else
						setTimeout("EfacsAppletReady()", 50);
				}
				else {
					localSetup2();
				}

				//
			
		}

		/**
		 * Called architecturally by EWM.
		 * Sets a flag to show whether a prompt should be given if unsaved eNotes details are detected.
		 */
		function setEWMSavedAndClosedFlag()
		{
			m_flgEWMSavedAndClosed = true;
		}

		/**
		 * Fires when a keypress on the body is detected.
		 * If keypress = F8 then launches ADAPT window and cancels the keypress bubble.
		 *
		 * @objEvent The window event object.
		 */
		function appTrans_mainBodyKeyDown(objEvent)
		{
			if (! objEvent) 
				objEvent = window.event; // Get event details for IE

			if (!objEvent)
				return;
				
			
				if (objEvent.keyCode == 119)	// Function key F8	- ADAPT
				{
					if (objApplication.Modules("0002a-adpt"))
					{
						var objRPC = new RPCObject("UserRole");
						var strIsDeveloper = objRPC.execute("hasUserRole", objApplication.Connection.strConnectionString, objApplication.User.userID, "DEVELOPER", objApplication.User.company);
						if (strIsDeveloper == "true")
						{
							var strURL = "http://" + objApplication.Connection.applicationServer + "/efacs/" + objApplication.User.languageDirectory + "/Applications_HTML/appAdapt.html";
							if (objEvent.srcElement.className == "EfacsFieldHasFocus" || 
								objEvent.srcElement.className == "EfacsField" ||
								objEvent.srcElement.className == "EfacsFieldRequiredHasFocus" ||
								objEvent.srcElement.className == "ReadBox")
							{
								strURL = strURL + "?contextformfield=" + objEvent.srcElement.id;
							}

							objApplication.openChildWindow(window, strURL, "ADAPT_appWorkflowModelNodeEdit");

							// Prevent this keypress from being entered into the textbox.
							objEvent.cancelBubble = true;
						}
					}
				}
			
				
			if (objEvent.keyCode == 38 ||	// up arrow
				objEvent.keyCode == 40 ||	// down arrow
				objEvent.keyCode == 37 ||	// left arrow
				objEvent.keyCode == 39 ||	// right arrow
				objEvent.keyCode == 8  ||	// back space
				objEvent.keyCode == 119)	// F8
			{
				appTrans_mainBodyFTEvent(objEvent);
			}
		}

		/**
		 * Fires when onclicks or ondblclicks are detected on the body.
		 * If a functional test is being recorded then the clicks will be
		 * logged as part of that test.
		 *
		 * @param objEvent The window event object.
		 */
		function appTrans_mainBodyFTEvent(objEvent)
		{
			if (m_objFunctionalTest == null)
				return;
			
			if (objApplication.fileName.indexOf("appFTUnitRecorder") != -1)
				return;

			if (! objEvent) 
				objEvent = window.event; // Get event details for IE

			if (m_objFunctionalTest != null)
			{
				if (m_objFunctionalTest.isFunctionalTestRecording() == false)
					return;
				m_objFunctionalTest.recordEvent(objEvent);
			}
		}

		
		/**
		 * Used by functional testing to record unexpected script errors.
		 *
		 * @param sMsg The error message.
		 * @param sUrl The URL of the application that generated the script error.
		 * @param sLine The line number the error occurred on.
		 */
		function appTrans_onError(sMsg, sUrl, sLine)
		{
			try {
				if (m_objFunctionalTest != null && m_objFunctionalTest.isFunctionalTestPlaying() == true)
					m_objFunctionalTest.recordTestFailure("Unexpected script error", "Line " + sLine + ", " + sMsg);
				else{
					var strErrorXML = "<error><message>" + sMsg + "</message>";
					strErrorXML += "<linenumber>" + sLine + "</linenumber>";
					strErrorXML += "<apptitle>" + unescape(ParseStringFromURL("apptitle", sUrl)) + "</apptitle></error>";
					
					var objJavaScriptError = new Error(80002, strErrorXML);
					showEfacsError(objJavaScriptError, window, true);
				}
			} catch (error) {
			}
		}
		
				function appTrans_waitForFormSource()
				{
					var flgAllDone = true;

					for (var i = 0, intLen = arguments.length; i < intLen; i++)
					{
						try {
							if (window.frames[arguments[i]].document.body.children.length == 0)
							{
								flgAllDone = false;
								break;
							}
						}
						catch (objError)
						{
							flgAllDone = false;
							break;
						}
					}

					var strArgs = "";
					for (var i = 0, intLen = arguments.length; i < intLen; i++)
					{
						strArgs += "\"" + arguments[i] + "\"";
						if (i + 1 < intLen)
							strArgs += ", ";
					}

					if (flgAllDone == false)
						setTimeout("appTrans_waitForFormSource(" + strArgs + ")", 50);
					else
					{
						for (var i = 0, intLen = arguments.length; i < intLen; i++)
						{
							if (window.frames[arguments[i]].document.body.children[0].tagName != "FORM")
							{
								var strError = "Form file missing or failed to load '" + arguments[i] + ". Application will close.";
								eMsgBox(strError, vbOKOnly, msg_Critical, window);
								objApplication.hadCriticalError = true;
								objApplication.closeApplication();
								window.close();
								return;
							}
							else
							{
								var objForm = eval(arguments[i].replace("_iframe", ""));
								var intFieldCount = Number(window.frames[arguments[i]].document.body.fieldCount);
								
								// If we cannot get a reference to the last field on the form then it must not be ready.
								if (objForm.flgCreatedFields != true ||
									objForm.fields == null || 
									objForm.fields.length < intFieldCount ||
									objForm.fields[intFieldCount - 1] == null || 
									window.frames[arguments[i]].document.getElementById(objForm.id + "_" + objForm.fields[intFieldCount - 1].strRef) == null)
								{
									flgAllDone = false;
									break;
								}
							}
						}
						
						if (flgAllDone == false)
							setTimeout("appTrans_waitForFormSource(" + strArgs + ")", 100);
						else
						{
							objApplication.Debug.writeTime("Form IFRAMES now loaded", "file-name=xsltAppTranslator.xslt");
							var objFunctionalTest = new FunctionalTest(window);
							objFunctionalTest.initialise(false);
							if (objFunctionalTest.isFunctionalTestPlaying() == true)
								setTimeout("appTrans_doAppInitialise()", 400);
							else
								appTrans_doAppInitialise();
						}
					}
				}
			

		function localSetup() {
			
						if (isAppWindowInAppContainer(window))
						{
							document.body.style.marginTop = "2";
							document.body.style.marginBottom = "2";
							document.body.style.marginLeft = "0";
							document.body.style.marginRight = "0";
							document.body.style.padding = "0";
							document.body.style.paddingRight = "0";
						}
					
					// New application window so create AppData object and set DB connectivity string.
					
							objApplication = new Application(unescape(ParseStringFromURL("apptitle", window.document.URL)), "appWorkflowModelNodeEdit.xml", unescape(ParseStringFromURL("appid", window.document.URL)), window);
							objApplication.menuID = unescape(ParseStringFromURL("menuid", window.document.URL));
						
					objApplication.debugSetup(window);
					
							objApplication.PersistentXML = new PersistentXML();
						
						objApplication.strRevision = "$Revision: 14 $";
						objApplication.strLastModified = "$Date: 6/09/04 23:50 $";
					

			objApplication.Debug.startWindow(window);

			objApplication.Debug.writeTime("Created PersistentXML", "file-name=xsltAppTranslator.xslt");

			
				if (objApplication.fileName != "appMenu.xml") // Menu creates the log number later on - never on URL at this point so don't over-write with "undefined".
					objApplication.logNumber = Number(ParseStringFromURL("applog", window.document.URL));

				if (isNaN(objApplication.logNumber))
					objApplication.logNumber = 0;
			

			
			objDict = new Dict();
			
				objDict.add("NODATAINGRID", "No data found in grid. If you see data in the grid you must save it first before being able to remove it.");
			
				objDict.add("ADDRECORD", "Add #1");
			
				objDict.add("UPDATERECORD", "Update #1");
			
				objDict.add("OK", "OK");
			
				objDict.add("CANCEL", "Cancel");
			
				objDict.add("ABORT", "Abort");
			
				objDict.add("RETRY", "Retry");
			
				objDict.add("IGNORE", "Ignore");
			
				objDict.add("YES", "Yes");
			
				objDict.add("NO", "No");
			
				objDict.add("YESTOALL", "Yes to all");
			
				objDict.add("ABOUT", "About");
			
				objDict.add("DISPLAYABOUTINFO", "Displays information about this application");
			
				objDict.add("CLOSE", "Close");
			
				objDict.add("CLOSETHISAPP", "Closes this application");
			
				objDict.add("CANNOTLOADSCHEMA", "Cannot load schema #1");
			
				objDict.add("REQUESTFAILED", "Request or reply failed.");
			
				objDict.add("CANNOTDELETEROW", "Deleting row from Grid - cannot find row #1.");
			
				objDict.add("CANNOTSETROWSTATE", "Hiding/unhiding a row from Grid - cannot find row #1.");
			
				objDict.add("CANNOTGETROWSTATE", "Display state of the Grid - cannot find row #1.");
			
				objDict.add("CANNOTUPDATEROW", "Updating row in Grid - cannot find row #1.");
			
				objDict.add("NOTENOUGHGRIDARGS", "Error in Grid - not enough arguments passed.");
			
				objDict.add("TOOMANYGRIDARGS", "Error in Grid - too many arguments passed.");
			
				objDict.add("CANNOTSELECTROW", "Selecting row from Grid - cannot find row #1.");
			
				objDict.add("ERROR", "Error");
			
				objDict.add("ERRORNUMBER", "Error number");
			
				objDict.add("FAULTCODE", "Fault code");
			
				objDict.add("FAULTACTOR", "Fault actor");
			
				objDict.add("DETAIL", "Detail");
			
				objDict.add("EXCEPTIONTYPE", "Exception type");
			
				objDict.add("SOURCE", "Source");
			
				objDict.add("STACKTRACE", "Stack trace");
			
				objDict.add("QUESTION", "Question");
			
				objDict.add("WARNING", "Warning");
			
				objDict.add("INFORMATION", "Information");
			
				objDict.add("SAVECHANGES", "Do you wish to save your changes ?");
			
				objDict.add("REMOVESELECTEDITEM", "Are you sure you wish to remove the selected item ?");
			
				objDict.add("REMOVESELECTEDITEMS", "Are you sure you wish to remove the selected items ?");
			
				objDict.add("READY", "Ready");
			
				objDict.add("CANNOTINSERTDUPLICATERECORD", "This record already exists.");
			
				objDict.add("PROMPTTOLEAVEEFACS", "You are about to leave EFACS E/8.");
			
				objDict.add("MAPPOSTCODEFORADDRESS", "No postcode associated with this address.");
			
				objDict.add("MAPINPUTPARAMATERTYPE", "Map input parameters - trader type must be passed before postcode.");
			
				objDict.add("MAPINPUTPARAMATERID", "Map input parameters - trader id must be passed before postcode.");
			
				objDict.add("MAPLOAD", "Load map - cannot find trader.");
			
				objDict.add("NOMENUITEMSFOUND", "No menu items found.");
			
				objDict.add("EFACSMENUDESCRIPTION", "EFACS E/8 Menu");
			
				objDict.add("VALUENOTONDATABASE", "This value does not exist on the database.");
			
				objDict.add("INVALIDVALUE", "The value you have entered is invalid.");
			
				objDict.add("INVALIDNUMERICVALUE", "Invalid integer value entered.");
			
				objDict.add("INVALIDFLOATVALUE", "Invalid floating point value entered.");
			
				objDict.add("INVALIDDATEVALUE", "Invalid date format entered.");
			
				objDict.add("INVALIDTIMEVALUE", "Invalid time format entered.");
			
				objDict.add("FIELDREQUIRESVALUE", "This field requires a value to be entered.");
			
				objDict.add("EXECUTEQUERY", "Execute a query to find a");
			
				objDict.add("ADDRESSLOOKUP", "Address Lookup");
			
				objDict.add("VALUEBELOWMIN", "This value cannot be less than #1.");
			
				objDict.add("VALUEABOVEMAX", "This value cannot be greater than #1.");
			
				objDict.add("HELP", "Help");
			
				objDict.add("APPLICATIONHELP", "Displays user guide information about this application");
			
				objDict.add("MUSTSELECTVALUEFROMLIST", "You must select a value from the drop down list.");
			
				objDict.add("NEW", "NEW");
			
				objDict.add("CONTINUEYESNO", "Do you wish to continue?");
			
				objDict.add("FORMISINVALID", "The form is invalid. Record will not be saved.");
			
				objDict.add("INSUFFICIENTINFO", "There is insufficient information available to save the eNotes.");
			
				objDict.add("EFACSE8", "EFACS E8");
			
				objDict.add("EXPAND", "Expand");
			
				objDict.add("COLLAPSE", "Collapse");
			
				objDict.add("SYSPARAMNOTFOUND", "System parameter #1 cannot be loaded from the database.");
			
				objDict.add("CANNOTSAVEDOM", "Cannot save DOM to #1.");
			
				objDict.add("INFORMATIONPANEL", "Information panel");
			
				objDict.add("CANNOTCOMMUNICATEWITHLICENCE", "Cannot communicate with the licence server. Please contact your system administrator.");
			
				objDict.add("LICENCESESSIONEXPIRED", "Detail : Session has expired.");
			
				objDict.add("LICENCECONNECTIONRESETBYPEER", "Detail : Connection reset by peer.");
			
				objDict.add("LICENCECONNECTIONREFUSED", "Detail : Connection refused.");
			
				objDict.add("OUTOFMEMORYERROR", "An out of memory error has occurred. Please contact your system administrator.");
			
				objDict.add("EDITMODE", "Edit");
			
				objDict.add("DISPLAYMODE", "Preview");
			
				objDict.add("APPSERVERNOTRUNNING", "Cannot communicate with the application server. Please contact your system administrator.");
			
				objDict.add("INVALIDHOMECURRENCY", "The system parameter LEHOMECURR is not set to a valid currency code. Please contact your system administrator.");
			
				objDict.add("INVALIDFEATURE", "You are not licenced to run this feature. Please contact your system administrator.");
			
				objDict.add("DATEBEFORETODAY", "The date is before today.");
			
				objDict.add("RECORDERRORS", "The record is invalid, do you wish to continue without saving?");
			
				objDict.add("SAVEENOTESCHANGES", "Do you wish to save your enotes changes ?");
			
				objDict.add("CONFLICTWARNING", "Cannot save.  This record has been changed by another user since you last opened the record.  Please re-enter your data.");
			
				objDict.add("FIELDNAME", "Field name");
			
				objDict.add("ORIGINALVALUE", "Original value");
			
				objDict.add("CURRENTVALUE", "Current value");
			
				objDict.add("INSERTPERMISSIONDENIED", "You are not allowed to create new data on this table.");
			
				objDict.add("UPDATEPERMISSIONDENIED", "You are not allowed to modify data on this table.");
			
				objDict.add("DELETEPERMISSIONDENIED", "You are not allowed to delete data from this table.");
			
				objDict.add("CANNOTDELETERECORDINUSE", "This record cannot be removed as it is referenced elsewhere.");
			
				objDict.add("SAVEFORSETTLEMENTDISC", "Please confirm that you wish to change the settlement discount and propagate it through all existing items for this order?");
			
				objDict.add("ORDERITEMSOPEN", "You must save and close all item windows before you can effectively alter the settlement discount.");
			
				objDict.add("NOACCESS", "You do not have permissions to access the selected document.");
			
				objDict.add("NOADDPERMISSION", "You do not have permissions to add documents to the selected cabinet.");
			
				objDict.add("NOREMOVE", "You do not have permissions to remove documents from the current cabinet.");
			
				objDict.add("NOMODIFY", "You do not have permissions to modify documents in this cabinet.");
			
				objDict.add("DOCUMENTXOFY", "Document #1 of #2");
			
				objDict.add("DOCUMENT", "Document");
			
				objDict.add("NEXTDOCUMENT", "Move to the next document in the list");
			
				objDict.add("PREVIOUSDOCUMENT", "Move to the previous document in the list");
			
				objDict.add("POPOUTDOC", "Click to open document in a new window");
			
				objDict.add("DATAENGINEERROR", "Data Engine failed and could not carry out the requested action.");
			
				objDict.add("DATAENGINECLASSERROR", "The following method caused the failure:");
			
				objDict.add("FAILEDPERFORMACTION", "Failed to perform action");
			
				objDict.add("BUSINESSNAME", "Business name");
			
				objDict.add("PROPERTYNAME", "Property name");
			
				objDict.add("REASON", "Reason");
			
				objDict.add("CLASS", "Class");
			
				objDict.add("METHOD", "Method");
			
				objDict.add("PARAMETER", "Parameter");
			
				objDict.add("SHOWSQL", "Show SQL");
			
				objDict.add("HIDESQL", "Hide SQL");
			
				objDict.add("DESCRIPTION", "Description");
			
				objDict.add("NUMBER", "Number");
			
				objDict.add("SHOWSTACKTRACE", "Show stack trace");
			
				objDict.add("HIDESTACKTRACE", "Hide stack trace");
			
				objDict.add("LINENUMBER", "Line number");
			
				objDict.add("APPLICATION", "Application");
			
				objDict.add("NOMINAL", "Nominal code");
			
				objDict.add("APPORTION", "Apportionment code");
			
				objDict.add("PERIODNOTDEFINED", "Financial period has not been defined.");
			
				objDict.add("BATCHFROZEN", "This batch is frozen and cannot be used at the moment.");
			
				objDict.add("IOCREATESESSION", "Creating Session was unsuccessful.");
			
				objDict.add("INVALIDSESSIONFORMAT", "Invalid format for session string, possible corruption.");
			
				objDict.add("INVALIDCALENDARDATERANGE", "The specified date range is invalid.");
			
				objDict.add("OVERLAPORGAPNOTALLOWED", "Overlap and/or gaps not allowed.");
			
				objDict.add("JSCRIPTERROR", "JavaScript error");
			
				objDict.add("UNEXPECTEDJSCRIPTERROR", "An unexpected JavaScript error has occurred.");
			
				objDict.add("xsd:string", "String");
			
				objDict.add("xsd:float", "Float");
			
				objDict.add("xsd:double", "Double");
			
				objDict.add("xsd:decimal", "Decimal");
			
				objDict.add("xsd:integer", "Integer");
			
				objDict.add("xsd:short", "Short");
			
				objDict.add("xsd:smallint", "Smallint");
			
				objDict.add("xsd:dateTime", "Date-time");
			
				objDict.add("COMBOBOX", "Combo box");
			
				objDict.add("TEXTBOX", "Text box");
			
				objDict.add("DATETIMEBOX", "Date time field");
			
				objDict.add("CHECKBOX", "Check box");
			
				objDict.add("TEXTAREA", "Text area");
			
				objDict.add("FORMS", "Forms");
			
				objDict.add("FORMFIELDS", "Fields");
			
				objDict.add("CONTEXTCOPY", "Copy");
			
				objDict.add("CONTEXTCUT", "Cut");
			
				objDict.add("CONTEXTPASTE", "Paste");
			
				objDict.add("CONTEXTCLEAR", "Clear");
			
				objDict.add("CONTEXTINFO", "Information panel");
			
				objDict.add("EMAILCONFIG_BADUSERORPASSWORD", "Bad username or password on the company email configuration.");
			
				objDict.add("EMAILCONFIG_ERROR", "Error with the company email configuration.");
			
				objDict.add("CTITYPEERROR", "Unknown CTI parameter #1");
			
				objDict.add("CTICALLACTIVE", "You already have an active call");
			
				objDict.add("CTITRADERTYPENOTDEFINEDONFORM", "Trader type field is not defined on the form. Cannot drill down.");
			
				objDict.add("CTITRADERTYPENOTDEFINEDONGRID", "Trader type field is not defined on the grid. Cannot drill down.");
			
				objDict.add("CTITRADERTYPENOTSET", "No value set for trader type. Cannot drill down.");
			
				objDict.add("SORTINGNOTSUPPORTED", "Sorting not supported for this column");
			

			objApplication.Debug.writeTime("Created Dictionary", "file-name=xsltAppTranslator.xslt");

			
			

			if (typeof(lnkAbout) != 'undefined') {
				lnkAbout.innerHTML = fl("ABOUT");
				lnkAbout.title = fl("DISPLAYABOUTINFO");
			}
			if (typeof(lnkClose) != 'undefined') {
				lnkClose.innerHTML = fl("CLOSE");
				lnkClose.title = fl("CLOSETHISAPP");
			}
			
			
					var bMessage = false;
				
				if (!bMessage && (objApplication.fileName == "appMenu.xml" || objApplication.fileName == "appMobileMenu.xml") && ParseStringFromURL("login", document.URL) != "query" )
				{
					var prodXML = objApplication.createXMLDocument();

					prodXML.loadURL("http://" + location.host + "/efacs/English/XML/xmlProductDetails.xml");

					var prodNode = prodXML.documentElement().selectSingleNode("/evc:component/content/product-details/name");

					if (prodNode != null) {

						var product = prodNode.getText() + " Menu";

						window.document.title = fl(product);
					}

					if (ParseStringFromURL("mds", document.URL) == null && ParseStringFromURL("login", document.URL) == "no")
					{
						alert("This menu option does not have a valid application specified. Please contact your system administrator.");
						window.ignoreOnBeforeUnload = true;
						window.close();
						return;
					}
				
					objApplication.Connection = new Connection();
					objApplication.User = new User();

					objApplication.Connection.strConnectionString = b64Decode(undoReplaceForURL(ParseStringFromURL("constr", document.URL)));
					objApplication.Connection.masterDatabaseServer = b64Decode(undoReplaceForURL(ParseStringFromURL("mds", document.URL)));
					objApplication.Connection.databaseName = b64Decode(undoReplaceForURL(ParseStringFromURL("db", document.URL)));
					objApplication.Connection.applicationServer = b64Decode(undoReplaceForURL(ParseStringFromURL("appser", document.URL)));
					objApplication.Connection.databaseProvider = b64Decode(undoReplaceForURL(ParseStringFromURL("dbpro", document.URL)));
					objApplication.Connection.cServer = b64Decode(undoReplaceForURL(ParseStringFromURL("cserver", document.URL)));
					objApplication.Connection.earlServer = b64Decode(undoReplaceForURL(ParseStringFromURL("earlserver", document.URL)));
					objApplication.Connection.msAnalysisServer = b64Decode(undoReplaceForURL(ParseStringFromURL("msanalysisserver", document.URL)));
					objApplication.Connection.msReportingServer = b64Decode(undoReplaceForURL(ParseStringFromURL("msreportingserver", document.URL)));
					objApplication.Connection.crystalServer = b64Decode(undoReplaceForURL(ParseStringFromURL("crystalserver", document.URL)));
					objApplication.Connection.dataSource = b64Decode(undoReplaceForURL(ParseStringFromURL("datasource", document.URL)));
					objApplication.Connection.databaseSensitivity = b64Decode(undoReplaceForURL(ParseStringFromURL("databasesensitivity", document.URL)));
					objApplication.User.userID = b64Decode(undoReplaceForURL(ParseStringFromURL("user", document.URL)));
					objApplication.User.userName = b64Decode(undoReplaceForURL(ParseStringFromURL("username", document.URL)));
					objApplication.User.logUser = b64Decode(undoReplaceForURL(ParseStringFromURL("loguser", document.URL)));
					objApplication.User.company = b64Decode(undoReplaceForURL(ParseStringFromURL("comp", document.URL)));
					objApplication.User.companyName = b64Decode(undoReplaceForURL(ParseStringFromURL("compname", document.URL)));
					objApplication.User.language = b64Decode(undoReplaceForURL(ParseStringFromURL("lang", document.URL)));
					objApplication.User.languageName = b64Decode(undoReplaceForURL(ParseStringFromURL("langname", document.URL)));
					objApplication.User.localeid = b64Decode(undoReplaceForURL(ParseStringFromURL("localeid", document.URL)));
					if (isBlank(objApplication.User.localeid))
						objApplication.User.localeid = "en-GB";

					objApplication.User.languageDirectory = b64Decode(undoReplaceForURL(ParseStringFromURL("langdir", document.URL)));
					objApplication.User.homeCurrency = b64Decode(undoReplaceForURL(ParseStringFromURL("homecur", document.URL)));
					objApplication.User.cssGroupID = b64Decode(undoReplaceForURL(ParseStringFromURL("usercssgroupid", document.URL)));
				}

				if (!bMessage && ParseStringFromURL("login", document.URL) != "no" && ParseStringFromURL("login", document.URL) != "query" && (objApplication.fileName == "appMenu.xml" || objApplication.fileName == "appMobileMenu.xml"))
				{
					if (showModalWindow("../JSP/login.jsp", objApplication, "dialogWidth=739px; dialogHeight=399px; scroll=no; center=yes; help=no; status=no; resizable=no") == 0
					    || (! objApplication.User.languageDirectory || objApplication.User.languageDirectory == ""))
					{
						window.close();
						return;
					}

					var strMenuFile;

					if (objApplication.fileName == "appMenu.xml")
						strMenuFile = "appMenu.html";
					else
						strMenuFile = "appMobileMenu.html";

					var sessionURL = "http://" + objApplication.Connection.applicationServer + "/efacs/servlet/SessionStringServlet" +
						"?login=no" +
						"&constr=" + replaceForURL(b64Encode(objApplication.Connection.strConnectionString)) +
						"&mds=" + replaceForURL(b64Encode(objApplication.Connection.masterDatabaseServer)) +
						"&db=" + replaceForURL(b64Encode(objApplication.Connection.databaseName)) +
						"&appser=" + replaceForURL(b64Encode(objApplication.Connection.applicationServer)) +
						"&dbpro=" + replaceForURL(b64Encode(objApplication.Connection.databaseProvider)) +
						"&cserver=" + replaceForURL(b64Encode(objApplication.Connection.cServer)) +
						"&earlserver=" + replaceForURL(b64Encode(objApplication.Connection.earlServer)) +
						"&msanalysisserver=" + replaceForURL(b64Encode(objApplication.Connection.msAnalysisServer)) +
						"&msreportingserver=" + replaceForURL(b64Encode(objApplication.Connection.msReportingServer)) +
						"&crystalserver=" + replaceForURL(b64Encode(objApplication.Connection.crystalServer)) +
						"&datasource=" + replaceForURL(b64Encode(objApplication.Connection.dataSource)) +
						"&databasesensitivity=" + replaceForURL(b64Encode(objApplication.Connection.databaseSensitivity)) +
						"&user=" + replaceForURL(b64Encode(objApplication.User.userID)) +
						"&username=" + replaceForURL(b64Encode(objApplication.User.userName)) +
						"&loguser=" + replaceForURL(b64Encode(objApplication.User.logUser)) +
						"&comp=" + replaceForURL(b64Encode(objApplication.User.company)) +
						"&compname=" + replaceForURL(b64Encode(objApplication.User.companyName)) +
						"&lang=" + replaceForURL(b64Encode(objApplication.User.language)) +
						"&langname=" + replaceForURL(b64Encode(objApplication.User.languageName)) +
						"&localeid=" + replaceForURL(b64Encode(objApplication.User.localeid)) +
						"&langdir=" + replaceForURL(b64Encode(objApplication.User.languageDirectory)) +
						"&homecur=" + replaceForURL(b64Encode(objApplication.User.homeCurrency)) +
						"&prompttounload=true" +
						"&menuname=" + strMenuFile;
					if (!isBlank(objApplication.User.cssGroupID))
						sessionURL += "&usercssgroupid=" + replaceForURL(b64Encode(objApplication.User.cssGroupID));

					window.location = sessionURL;					

					return;
				}
			

			objApplication.Debug.writeTime("Created objApplication object", "file-name=xsltAppTranslator.xslt");

			
			if (objApplication.Modules("0019a-devel") == false)
			{
				window.onerror = appTrans_onError;
				addEvent(window.document.body, "oncontextmenu", appTrans_doContextMenu);
				window.document.body.isDeveloperLicence = false;
			}
			else
				window.document.body.isDeveloperLicence = true;

			//----------------------------------------------------------------------------------
			
			frmMain = objApplication.addForm(window.document.getElementById("frmfrmMain"), window);
			frmMain.loadFromFile("../Forms/frmWorkflowModelNodeEdit.xml");
				
			
			objApplication.Debug.writeTime("Added form ../Forms/frmWorkflowModelNodeEdit.xml", "file-name=xsltctlForm.xslt");

		frmTx = objApplication.addForm(window.document.getElementById("frmfrmTx"), window);
			frmTx.loadFromFile("../Forms/frmWorkflowModelNodeTx.xml");
				
			
			objApplication.Debug.writeTime("Added form ../Forms/frmWorkflowModelNodeTx.xml", "file-name=xsltctlForm.xslt");

		
				appTrans_waitForFormSource(
				"frmMain_iframe","frmTx_iframe"
				);
			
		}

		/**
		 * Fired when the right click mouse button is detected.
		 * Cancels the event so right clicks are ignored.
		 * Not called if server has a developer licence.
		 */
		function appTrans_doContextMenu(objEvent)
		{
			if (objEvent == null)
				objEvent = window.event;
			
			objEvent.cancelBubble = true;
			objEvent.returnValue = false;
		}
		
		function appTrans_doAppInitialise()
		{
			objApplication.Debug.writeTime("Created form objects", "file-name=xsltAppTranslator.xslt");

			
			
				if (unescape(ParseStringFromURL("apptitle", window.document.URL)) != "undefined")
					setWindowCaption(unescape(ParseStringFromURL("apptitle", window.document.URL)));
			

		if (objApplication.hadCriticalError)
		{
			if (objApplication.fileName == "appComboBox.xml" || objApplication.fileName == "appDateTimePicker.xml")
			{
				window.parent.objApplication.hadCriticalError = true;
				window.parent.close();
			}

			return;
		}
		
		objApplication.Debug.writeTime("Set window caption", "file-name=xsltAppTranslator.xslt");

		//--------------------------------------------------------------------------------------
		
		

		
		//--------------------------------------------------------------------------------------
		
		objStatusBar = new StatusBar();
		objApplication.Debug.writeTime("Created status bar", "file-name=xsltAppTranslator.xslt");

		//---------------------------------------------------------------------------------------
		
		
		// Constructor will also set up graphical icons for toolbar
			tblMain = new Toolbar(window.document.getElementById("tlbtblMain"), window);
				
		var objElement = window.document.getElementById("tblMain_btnSave");
		if (objElement == null){
			var objParentElement = window.document.getElementById("tlbtblMain");
			if (objParentElement == null)
				objElement = window.document.getElementById("btnSave");
			else 
				objElement = objParentElement.tBodies[0].rows[0].cells["btnSave"]
		}

		var objButton = new ToolbarButton(objElement, tblMain);
		objButton.moduleRequired = "";
		tblMain.arrButtons[tblMain.arrButtons.length] = objButton;
		
				objApplication.arrToolbars[objApplication.arrToolbars.length] = tblMain;
			tlbVariable = new Toolbar(window.document.getElementById("tlbtlbVariable"), window);
				
		var objElement = window.document.getElementById("tlbVariable_btnNewVar");
		if (objElement == null){
			var objParentElement = window.document.getElementById("tlbtlbVariable");
			if (objParentElement == null)
				objElement = window.document.getElementById("btnNewVar");
			else 
				objElement = objParentElement.tBodies[0].rows[0].cells["btnNewVar"]
		}

		var objButton = new ToolbarButton(objElement, tlbVariable);
		objButton.moduleRequired = "";
		tlbVariable.arrButtons[tlbVariable.arrButtons.length] = objButton;
		
		var objElement = window.document.getElementById("tlbVariable_btnOpenVar");
		if (objElement == null){
			var objParentElement = window.document.getElementById("tlbtlbVariable");
			if (objParentElement == null)
				objElement = window.document.getElementById("btnOpenVar");
			else 
				objElement = objParentElement.tBodies[0].rows[0].cells["btnOpenVar"]
		}

		var objButton = new ToolbarButton(objElement, tlbVariable);
		objButton.moduleRequired = "";
		tlbVariable.arrButtons[tlbVariable.arrButtons.length] = objButton;
		
		var objElement = window.document.getElementById("tlbVariable_btnRemoveVar");
		if (objElement == null){
			var objParentElement = window.document.getElementById("tlbtlbVariable");
			if (objParentElement == null)
				objElement = window.document.getElementById("btnRemoveVar");
			else 
				objElement = objParentElement.tBodies[0].rows[0].cells["btnRemoveVar"]
		}

		var objButton = new ToolbarButton(objElement, tlbVariable);
		objButton.moduleRequired = "";
		tlbVariable.arrButtons[tlbVariable.arrButtons.length] = objButton;
		
				objApplication.arrToolbars[objApplication.arrToolbars.length] = tlbVariable;
			
			objApplication.Debug.writeTime("Created toolbar objects", "file-name=xsltAppTranslator.xslt");
		

		//---------------------------------------------------------------------------------------
		
		

		// Create new Grid objects and set the grid properties
		grdWorkflowModelNodeEdit = objApplication.addGrid(document.getElementById("grdgrdWorkflowModelNodeEdit"),
			"single",
			"",
			"true",
			"",
			"openVar()",
			"", window);

		var flgHasTitle = false;
		if (objAppTitle != null) {
			if (!objAppTitle.multipleGrids) {
				flgHasTitle = true;
			}
		}
		grdWorkflowModelNodeEdit.hasTitle = flgHasTitle;

		grdWorkflowModelNodeEdit.loadSettingsFromFile("../Grids/grdWorkflowModelNodeEdit.xml");
		grdWorkflowModelNodeEdit.strSrc = "../Grids/grdWorkflowModelNodeEdit.xml";
		
		
				
				
				if (grdWorkflowModelNodeEdit.onRowSelect)
					grdWorkflowModelNodeEdit.onRowSelect = ("objGrid.objAppWindow.GRID_grdWorkflowModelNodeEdit_rowClick();objGrid.objAppWindow." + grdWorkflowModelNodeEdit.onRowSelect + ";");
				else
					grdWorkflowModelNodeEdit.onRowSelect =  "objGrid.objAppWindow.GRID_grdWorkflowModelNodeEdit_rowClick()";

				
				
					document.getElementById("btnOpenVar").disabled = true;
				
					document.getElementById("btnRemoveVar").disabled = true;
				grdWorkflowModelNodeEdit.onDelKeyPressed = "removeVar();";
			grdWorkflowModelNodeEdit.onDelKeyPressed = "removeVar();";
			grdWorkflowModelNodeEdit.addContextMenuOption("New", "newVar()", "New", "btnNewVar", "Add a variable", null, "", "tlbVariable");
						grdWorkflowModelNodeEdit.addContextMenuOption("Open", "openVar()", "Open", "btnOpenVar", "Open a variable", null, "", "tlbVariable");
						grdWorkflowModelNodeEdit.addContextMenuOption("Remove", "removeVar()", "Remove", "btnRemoveVar", "Remove a variable", null, "", "tlbVariable");
						grdWorkflowModelNodeEdit.addContextMenuOption(fl("INFORMATIONPANEL"), "grdWorkflowModelNodeEdit.fireInfoPanel", "InfoPanel");

	
			objApplication.Debug.writeTime("Created grid objects", "file-name=xsltAppTranslator.xslt");
		
		
		//---------------------------------------------------------------------------------------
		
		

		//---------------------------------------------------------------------------------------
		
		

			// Create new tabbed-dialog objects.
			tabdHeader = new TabbedDialog(document.getElementById("tabdtabdHeader"), window);
			objApplication.arrTabbedDialogs[objApplication.arrTabbedDialogs.length] = tabdHeader;

			

			var tmpButton;
			

				if (document.getElementById("tabdtabdHeader").tFoot) {
					if (objApplication.browser == APPLICATION_IE)
						tmpButton = document.getElementById("tabdtabdHeader").tFoot.rows[0].cells[0].childNodes[0].tBodies[0].rows[0].cells[(1 - 1) * 2];					
					else
						tmpButton = document.getElementById("tabdtabdHeader").tFoot.rows[0].cells[0].childNodes[0].nextSibling.tBodies[0].rows[0].cells[(1 - 1) * 2];
						
				}
				else {
					if (objApplication.browser == APPLICATION_IE)
						tmpButton = document.getElementById("tabdtabdHeader").tHead.rows[0].cells[0].childNodes[0].tBodies[0].rows[0].cells[(1 - 1) * 2];
					else
						tmpButton = document.getElementById("tabdtabdHeader").tHead.rows[0].cells[0].childNodes[0].nextSibling.tBodies[0].rows[0].cells[(1 - 1) * 2];						
				}

				var objTab = tabdHeader.addTab("Script", tmpButton, 1);
				
					objTab.onclick = "window_onresize()";
				

				if (document.getElementById("tabdtabdHeader").tFoot) {
					if (objApplication.browser == APPLICATION_IE)
						tmpButton = document.getElementById("tabdtabdHeader").tFoot.rows[0].cells[0].childNodes[0].tBodies[0].rows[0].cells[(2 - 1) * 2];					
					else
						tmpButton = document.getElementById("tabdtabdHeader").tFoot.rows[0].cells[0].childNodes[0].nextSibling.tBodies[0].rows[0].cells[(2 - 1) * 2];
						
				}
				else {
					if (objApplication.browser == APPLICATION_IE)
						tmpButton = document.getElementById("tabdtabdHeader").tHead.rows[0].cells[0].childNodes[0].tBodies[0].rows[0].cells[(2 - 1) * 2];
					else
						tmpButton = document.getElementById("tabdtabdHeader").tHead.rows[0].cells[0].childNodes[0].nextSibling.tBodies[0].rows[0].cells[(2 - 1) * 2];						
				}

				var objTab = tabdHeader.addTab("Comments", tmpButton, 2);
				
					objTab.onclick = "window_onresize()";
				

				if (document.getElementById("tabdtabdHeader").tFoot) {
					if (objApplication.browser == APPLICATION_IE)
						tmpButton = document.getElementById("tabdtabdHeader").tFoot.rows[0].cells[0].childNodes[0].tBodies[0].rows[0].cells[(3 - 1) * 2];					
					else
						tmpButton = document.getElementById("tabdtabdHeader").tFoot.rows[0].cells[0].childNodes[0].nextSibling.tBodies[0].rows[0].cells[(3 - 1) * 2];
						
				}
				else {
					if (objApplication.browser == APPLICATION_IE)
						tmpButton = document.getElementById("tabdtabdHeader").tHead.rows[0].cells[0].childNodes[0].tBodies[0].rows[0].cells[(3 - 1) * 2];
					else
						tmpButton = document.getElementById("tabdtabdHeader").tHead.rows[0].cells[0].childNodes[0].nextSibling.tBodies[0].rows[0].cells[(3 - 1) * 2];						
				}

				var objTab = tabdHeader.addTab("Nodes", tmpButton, 3);
				
					objTab.onclick = "window_onresize()";
				frmTx.tabbedDialog = tabdHeader;
			
			objApplication.Debug.writeTime("Created tabbed dialog objects", "file-name=xsltAppTranslator.xslt");
		
						
		//---------------------------------------------------------------------------------------
				
								

		//---------------------------------------------------------------------------------------
		
		
		
		//---------------------------------------------------------------------------------------
		
		

		//---------------------------------------------------------------------------------------
		
		

		//---------------------------------------------------------------------------------------
		
		

		//---------------------------------------------------------------------------------------
		
				
			objApplication.Debug.writeTime("Finished creating emerald objects", "file-name=xsltAppTranslator.xslt");
		
			
			
				objStatusBar.message("READY"); 
				objStatusBar.setUser(objApplication.User.userID, objApplication.User.userName);
				objStatusBar.setCompany(objApplication.User.company, objApplication.User.companyName);
				
				var objParam = objApplication.Data.getSystemParameter("SSPRINTING");
		
				if (objParam.selectSingleNode("spvalue/value").getText().toLowerCase() == "on")
				{
					var printApplication = false;
					
					
					
					if (m_strComponentId == "appEarl2.xml" || m_strComponentId == "appEarl.xml" || printApplication == true)
					{
						objStatusBar.showPrinter();
						
						var objRPCObject = new RPCObject("printer");
						
						objRPCObject.execute("getDefaultPrinter", objApplication.Connection.strConnectionString, unescape(ParseStringFromURL("appid", window.document.URL)));
						var objRetVal = objRPCObject.getReturnedXMLDom();

						if (objRetVal.selectSingleNode("//printers/printer/id/value") == null)
							objStatusBar.setPrinter("Not selected", "No printer selected");
						else
							objStatusBar.setPrinter(objRetVal.selectSingleNode("//printers/printer/id/value").getText(), objRetVal.selectSingleNode("//printers/printer/printerid/value").getText());
					}
					else
						objStatusBar.hidePrinter();
				}
				else
					objStatusBar.hidePrinter();
				
			
			
			objApplication.Debug.writeTime("Set status bar user and company", "file-name=xsltAppTranslator.xslt");

			
			

			objApplication.Debug.writeTime("Initialised EVC's", "file-name=xsltAppTranslator.xslt");

			
			
					var objFunctionalTest = new FunctionalTest(window);
					objFunctionalTest.initialise(false);
					if (objFunctionalTest.isFunctionalTestPlaying() == true)
					{
						window.onerror = appTrans_onError;
						window.alert = new Function("strMessage", "eMsgBox(\"Intercepted alert - \" + strMessage, vbOKOnly, msg_Information, window);");
					}
				
		// This will call localSetup2 when the EfacsApplet is ready to allow SOAP calls etc.

		
				objApplication.Debug.writeTime("Calling localSetup2()", "file-name=xsltAppTranslator.xslt");
				localSetup2();
			

		// Need to check for critical error - localSetup2 may have failed.
		if (objApplication.hadCriticalError == true)
			return;

		
				// Create functional test events object.
				m_objFunctionalTest = new FunctionalTest(window);
				m_objFunctionalTest.initialise(true);
				if (m_objFunctionalTest.isFunctionalTestPlaying() == true)
				{
					window.onerror = appTrans_onError;
					window.alert = new Function("strMessage", "eMsgBox(\"Intercepted alert - \" + strMessage, vbOKOnly, msg_Information, window);");
				}
			

		objApplication.Debug.writeTime("localSetup() - FINISH", "file-name=xsltAppTranslator.xslt");
		objApplication.Debug.writeMessage("");
		objApplication.Debug.writeMessage("TOTAL LOAD TIME", "time=" + leftPadWithChar(new Date().valueOf() - objApplication.Debug.startTime, 4, "0"));
		objApplication.Debug.endElement();

		
		window.document.body.appReady = "true";

		

	} // END OF LOCAL SETUP

	
		function AppTranslator_setupEditWindowManagerForms(objWindow)
		{
			if (objApplication.Forms("frmDocumentEdit") != null) 
			{
				var objEditWindowManager = tabdHeader.documentEWM;
				if (objEditWindowManager != null)
					objEditWindowManager.addFormReference(objApplication.Forms("frmDocumentEdit"), objWindow);
			}
		}
	

	function localSetup2() {			
			

			objApplication.Debug.writeTime("Created DataEngine controls", "file-name=xsltAppTranslator.xslt");

			

			objApplication.Debug.writeTime("Container states have been set", "file-name=xsltAppTranslator.xslt");

			
			
			checkButtonModuleDependencies();
			
			
			if (typeof(initialise) != "undefined")
			{
				initialise();
				objApplication.Debug.writeTime("Called applications own initialise()", "file-name=xsltAppTranslator.xslt");
			}

			
			if (objApplication.hadCriticalError == true)
				return;

			

			objApplication.Debug.writeTime("INITIALISE DONE", "file-name=xsltAppTranslator.xslt");

			
			

			objApplication.Debug.writeTime("AUTOEXECUTED QUERIES", "file-name=xsltAppTranslator.xslt");

			
			window.document.getElementById("bodyDiv").style.display = "inline";
			objApplication.Debug.writeTime("bodyDiv is now visible", "file-name=xsltAppTranslator.xslt");

			localResize();
			objApplication.Debug.writeTime("Done resize()", "file-name=xsltAppTranslator.xslt");
			
			
			
			if (frmMain.setInitialFocus() == true) {}
			else if (frmTx.setInitialFocus() == true) {}
			

			objApplication.performADAPTScript(ADAPT_ONAPPLICATIONLOAD, window);

			

			objApplication.Debug.writeTime("Initial focus set -  FINISH localSetup2()", "file-name=xsltAppTranslator.xslt");
		}

		
		
				function GRID_grdWorkflowModelNodeEdit_rowClick() 
				{
					var flgDisabled;
					if (grdWorkflowModelNodeEdit.getSelectedColumnValue("uniqueid").length != 0)
						flgDisabled = false;
					else
						flgDisabled = true;

					var moduleRequired = "";
					var toolBarID = "tlbVariable";
					
					moduleRequired = objApplication.Toolbars(toolBarID).getButton("btnOpenVar").moduleRequired;
					if (moduleRequired == "" || objApplication.Modules(moduleRequired) == true) // Only do if we have the module
						document.getElementById("btnOpenVar").disabled = flgDisabled;
					
					moduleRequired = objApplication.Toolbars(toolBarID).getButton("btnRemoveVar").moduleRequired;
					if (moduleRequired == "" || objApplication.Modules(moduleRequired) == true) // Only do if we have the module
						document.getElementById("btnRemoveVar").disabled = flgDisabled;
					
				}
			

		function localResize() 
		{
			
			try {
				
			if (isHTMLElementVisible(window.document.getElementById("frmfrmMain")))
			{
				var intNewHeight = window.frames["frmMain_iframe"].document.body.children[0].offsetHeight;
				var objIFTag = window.document.getElementById("frmfrmMain");
				if (objIFTag.oldHeight != intNewHeight)
				{
					objIFTag.oldHeight = intNewHeight;
					objIFTag.style.height = intNewHeight;
				}
			}
		
			if (isHTMLElementVisible(window.document.getElementById("frmfrmTx")))
			{
				var intNewHeight = window.frames["frmTx_iframe"].document.body.children[0].offsetHeight;
				var objIFTag = window.document.getElementById("frmfrmTx");
				if (objIFTag.oldHeight != intNewHeight)
				{
					objIFTag.oldHeight = intNewHeight;
					objIFTag.style.height = intNewHeight;
				}
			}
		
			} catch (objError) {
			}

			
			// Automatically resize a grid to the width and height attributes - default to 100%.
			

		// Automatically resize a grid to the width and height attributes - default to 100%.

		try {
			if (isHTMLElementVisible(grdWorkflowModelNodeEdit.HTMLdiv))
			{
				grdWorkflowModelNodeEdit.setWidth("100%", "55");
					grdWorkflowModelNodeEdit.setHeight("100%", "110");
					
			}
		} catch (error) {
		}
		
	
				if (grdWorkflowModelNodeEdit != null &&grdWorkflowModelNodeEdit.HTMLdiv.hasFocus == true)
				{
					grdWorkflowModelNodeEdit.objAppWindow.document.body.focus();
					setTimeout("et_fixGridFocus('grdWorkflowModelNodeEdit')", 5);
				}
			

				try
				{
					var objTabbedDialog = tabdHeader;
					var objDocMan = objTabbedDialog.documentManager;
					
					
						if (objDocMan != null && objTabbedDialog.getTab(objTabbedDialog.strDocumentTab).hasFocus())
					
					{
						
							  
						var flgTDAutoExpand = false;
						
							flgTDAutoExpand = true;
						

						var intHeight = 0;
						if (!flgTDAutoExpand)
						{
							intHeight = objTabbedDialog.tabHeight;
 							
								if (intHeight > 200)
									intHeight -= 40;
								if (intHeight < 100)
									intHeight = 100;
							
						}
						
						var objGrid = grddoctabdHeader;
						var objDocView = window.document.getElementById("ccdocImageViewtabdHeader");
						var objTxtView = window.document.getElementById("txtEditorViewtabdHeader_notes_div_display");
						var objDocContainer = window.document.getElementById("ccccdocImagetabdHeader");
						var objTxtContainer = window.document.getElementById("ccccdocEnotestabdHeader");
						
						var objElement = objGrid.HTMLdiv;

						
						if (intHeight <= 0)
							intHeight = (getDocumentBodyHeight(window) - 70) - getOffsetTopFromElement(objElement, "BODY");
						if (intHeight <= 0)
							intHeight = 40;
						
						
						var intWidth = getDocumentBodyWidth(window)/5 - 11;
						
						var flgDocViewVisible = isHTMLElementVisible(objDocView);
						var flgTxtViewVisible = isHTMLElementVisible(objTxtView);
	
						objGrid.setHeight(intHeight + "px", "0");
						objDocContainer.style.height = intHeight;
						objTxtContainer.style.height = intHeight;

						
							if (!flgDocViewVisible && !flgTxtViewVisible)
								objGrid.setWidth((intWidth * 4.8) + "px", "0");
							else
								objGrid.setWidth((intWidth * 3) + "px", "0");
						
							if (flgDocViewVisible)
							{
								if (intHeight > 25)
									objDocView.style.height = intHeight - 25;
								if (intWidth > 15)
									objDocView.style.width = (intWidth * 2) - 30;
							}
							if (flgTxtViewVisible)
							{
								if (intHeight > 40)
									objTxtView.style.height = intHeight - 40;
								if (intWidth > 15)
									objTxtView.style.width = (intWidth * 2) - 30;
							}
						
					}
				} catch(error) { }
			


			if (typeof(window_onresize) != 'undefined')
				window_onresize();
		}

		

		function appTrans_onunload()
		{
			var flg = false;
			
			try {
				flg = (objApplication.browser == APPLICATION_NN);
			} catch (error) {
			}
				
			if (flg == true) {				// Netscape does not have an onBeforeUnload event - it doesn't really matter though as onUnload doesn't work in 7.0 anyway.
				// This is a VERY temporary solution just for demo purposes.
				appTrans_onbeforeunload();
			}
			
			if (typeof(window_onunload) != 'undefined')
				window_onunload();

			try {
				
					objApplication.removeGrid(grdWorkflowModelNodeEdit);
					
					
					objApplication.removeForm(frmMain);
				
					objApplication.removeForm(frmTx);
				
					objApplication.removeToolbar(tblMain);
				
					objApplication.removeToolbar(tlbVariable);
				
						objApplication.removeGrid(grddoctabdHeader);
						objApplication.removeToolbar(tlbtabdHeader);
						objApplication.removeContainer(ccdocImagetabdHeader);
						objApplication.removeContainer(ccdocEnotestabdHeader);
						objApplication.removeEditWindowManager(objDocEWMtabdHeader);
						if (txttabdHeader != null) {
							txttabdHeader.destroy();
							txttabdHeader = null;
						}
						if (txtEditorViewtabdHeader != null) {
							txtEditorViewtabdHeader.destroy();
							txtEditorViewtabdHeader = null;
						}
					
					objApplication.removeTabbedDialog(tabdHeader);
				
					if (!isBlank(m_strAutoTextEditor))
					{
						var objTextEditor = eval(m_strAutoTextEditor);
						if (objTextEditor != null)
							objTextEditor.destroy();
							objTextEditor = null;
					}
				

				if (objApplication.hadCriticalError == true)
					return;
			} catch (error) {
				return;
			}
		}

		function appTrans_onbeforeunload() 
		{
			
				if (objApplication == null || typeof(window.m_arrChildWindows) == "unknown")
					return;

				objApplication.performADAPTScript(ADAPT_ONAPPLICATIONUNLOAD, window);

				objApplication.closeAllChildWindows(window);
				
				// Remove this window from the parent m_arrChildWindows array.
				if (window.opener != null && typeof(window.opener.objApplication) != "unknown" && window.opener.objApplication != null)
				{
					var objParentWindow = window.opener;

					if (objParentWindow != window)
					{
						objParentWindow.arrNewArray = objParentWindow.appTrans_createEmptyArray();
						var flgFound = false;
		
						// Find this window in the parents' child window array.
						for (var intCtr = 0, intLen = objParentWindow.m_arrChildWindows.length; intCtr < intLen; intCtr++)
						{
							if (objParentWindow.m_arrChildWindows[intCtr] != window)
								objParentWindow.arrNewArray[objParentWindow.arrNewArray.length] = objParentWindow.m_arrChildWindows[intCtr];
							else {
								flgFound = true;
								objParentWindow.m_arrChildWindows[intCtr] = null;
							}
						}
						
						if (flgFound)
						{
							objParentWindow.m_arrChildWindows = objParentWindow.arrNewArray;
							objParentWindow.arrNewArray = null;
						}
					}
				}
				
			
						if (objDocEWMtabdHeader != null)
							objDocEWMtabdHeader.closeAll();
					

			if (typeof(objApplication.hadCriticalError) == "unknown" || objApplication.hadCriticalError == true)
				return;
			
			
				objApplication.Debug.endElement();
				objApplication.Debug.viewDebug();
			
				if (objApplication.fileName != "appComboBox.xml" && objApplication.fileName != "appDateTimePicker.xml" && objApplication.fileName != "appEarlRun.xml" && objApplication.fileName != "appEarlRun2.xml" && objApplication.fileName != "appMyEfacs.xml"  && objApplication.fileName != "appDragAndDrop.xml")
				{
					if (window.objStatusBar != null)
						window.objStatusBar.flgDoBeep = false;
					try {
						window.document.body.focus();
					} catch (objError) {
					}
					if (window.objStatusBar != null)
						window.objStatusBar.flgDoBeep = true;
				}
			
			
			m_blnWindowOnBeforeUnload = true;
			
			
					
			if (window.ignoreOnBeforeUnload == null)
			{
				
						if (typeof(window_onbeforeunload) != 'undefined')
							window_onbeforeunload();
					
					if (!isBlank(m_strAutoTextEditor))
					{
						var objTextEditor = eval(m_strAutoTextEditor);
						if (objTextEditor.isNotesDirty())
						{
							if (m_flgEWMSavedAndClosed == false)
							{
								if (eMsgBox(fl("SAVECHANGES"), vbYesNo, msg_Exclamation, window) == vbYes)
									objTextEditor.performOperation(window, 'save');
							}
							else
								objTextEditor.performOperation(window, 'save');
						}
					}
				
				
				if (m_objFunctionalTest != null)
				{
					
						if (m_objFunctionalTest.isFunctionalTestRecording())
							m_objFunctionalTest.recordUnloadEvent();
					
				}

				if (objApplication.browser == APPLICATION_IE) {

					
							if (objApplication.PersistentXML != null)
							{
								var strComponentID = m_strComponentId;
							
								if (strComponentID == "appInfoPanel.xml")
									strComponentID = strComponentID + "_" + m_strPanelName;
							
								objApplication.PersistentXML.saveWindowSettings(strComponentID, window);
							}
						
				}
			
				
					objApplication.updateLog(objApplication.logNumber);
				
			}
		}
		
		/**
		 * Creates an empty array object on this window reference.
		 * Used in onbeforeunload method when closing any open child windows.
		 *
		 * @return The empty array object.
		 */
		function appTrans_createEmptyArray()
		{
			return new Array();
		}
		
		/**
		 * onblur event for the combo div
		 * @param objEvent Event object
		 */
		function appTrans_doComboOnBlur(objEvent) {
			if (objEvent == null)
				objEvent = window.event;
			
			/*
			 * Remove focus from the combo button otherwise Form_onchange() thinks the combo is still
			 * active.
			 */
			try {
				objApplication.comboFormFieldObjectRef.selectOne.HTMLElement.hasFocus = false;
			} catch(error) { }

			objEvent.srcElement.style.display = "none";
			window.document.getElementById("ctlComboBoxFrame").style.display = "none";
		}
		
		/**
		 * Process key/mouse events for the combo.
		 * @see xsltDataEngineToComboBox For the actual combo box HTML
		 * @param objEvent Event object
		 */
		function appTrans_doComboOnKeyDown(objEvent) {
			objApplication.comboFormFieldObjectRef.selectOne.doKeyDown(objEvent);
		}
		
		/**
		 * Highlight the current row.
		 * Called from the onmouseover event on the combo HTML TBODY.
		 * @param objEvent Event object
		 * @see xsltDataEngineToComboBox For the actual combo box HTML
		 */
		function appTrans_doComboHighlightOn(objEvent) {
			objApplication.comboFormFieldObjectRef.selectOne.doHighlightOn(objEvent);
		}

		/**
		 * Select the current row.
		 * Called from the onclick event of the combo HTML TBODY.
		 * @param objEvent Event object
		 * @see xsltDataEngineToComboBox For the actual combo box HTML
		 */
		function appTrans_doComboBodyClick(objEvent) {
			objApplication.comboFormFieldObjectRef.selectOne.doBodyClick(objEvent);
		}
		
		
		
					function txttabdHeaderbtnEditorMode_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'changeeditormode');					}
				
					function txttabdHeadercmbTextType_textEditorOnchange() {
						txttabdHeader.performOperation(window, 'changetexttype');
					}
				
					function txttabdHeaderbtnCut_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'cut');					}
				
					function txttabdHeaderbtnCopy_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'copy');					}
				
					function txttabdHeaderbtnPaste_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'paste');					}
				
					function txttabdHeaderbtnBold_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'bold');					}
				
					function txttabdHeaderbtnItalic_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'italic');					}
				
					function txttabdHeaderbtnUnderline_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'underline');					}
				
					function txttabdHeaderbtnColourSelector_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'colourselector');					}
				
					function txttabdHeaderbtnAlignLeft_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'justifyleft');					}
				
					function txttabdHeaderbtnCentre_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'justifycenter');					}
				
					function txttabdHeaderbtnAlignRight_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'justifyright');					}
				
					function txttabdHeaderbtnInsertTable_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'inserttable');					}
				
					function txttabdHeaderbtnImage_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'image');					}
				
					function txttabdHeaderbtnLink_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'link');					}
				
					function txttabdHeaderbtnLibrary_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'library');					}
				
					function txttabdHeaderbtnDateTime_textEditorOnclick() {
						txttabdHeader.performOperation(window, 'dateTime');					}
				
					function txttabdHeadercmbFont_textEditorOnchange() {
						txttabdHeader.performOperation(window, 'changefont');
					}
				
					function txttabdHeadercmbSize_textEditorOnchange() {
						txttabdHeader.performOperation(window, 'changefontsize');
					}
				//]]></SCRIPT>

<SCRIPT language=javascript>//<![CDATA[
			
var m_flgSave;

function initialise() 
{
	var strKey;
	strKey = ParseStringFromURL("Key", document.URL);
	
	var strDesc = window.opener.getNodeProperty(strKey, "name");
	var strScript = window.opener.getNodeProperty(strKey, "script");
	var strComments = window.opener.getNodeProperty(strKey, "comments");
	
	if (!window.opener.document.ediagram.isWorkflowModel()) {
		frmTx.getFieldByRef("runintx").hide();
	} else {
		var flgTxEnabled = window.opener.getNodeProperty(strKey, "new-transaction");
		if (flgTxEnabled == "") {
			// doesnt exist so assume true
			frmTx.getHTMLFieldByRef("runintx").checked = true;
		} else if (String(flgTxEnabled) == String("true")) {
			frmTx.getHTMLFieldByRef("runintx").checked = true;
		}
	
	}
	
	frmMain.getFieldByRef("type").setValue(strKey);
	frmMain.getFieldByRef("description").setValue(strDesc);	
	txtScript.value = strScript;
	txtComment.value = strComments;
	populateVariableGrid(strKey);
	
	m_flgSave = false;
}

function populateVariableGrid(key) 
{
	// NOTE: This function populates the grid with the node data.
	
	var strVarData = window.opener.getNodeProperty(key, "variables");
	if (strVarData == "" ) return;
	
	var objVariables = objApplication.createXMLDocument();
	objVariables.loadXML(strVarData);
	var strName;
	var strValue;
	var strType;
	
	var objNodeList = objVariables.selectNodes("//variable");
	var objNode;
	var i = 0;
	
	for (objNode = objNodeList.nextNode(); objNode != null; objNode = objNodeList.nextNode()) {
		var varname = objNode.getAttribute("name");
		var vartype = objNode.getAttribute("type");
		var value = objNode.getText()
		grdWorkflowModelNodeEdit.insertRow(etc_AFTER, -1, i++,varname,vartype,value);
	}
}

function newVar() 
{
	var strURL = "../Applications_HTML/appWorkflowModelVariableEdit.html";
	strURL += "?mode=add";
	
	// open the edit 'xml' page
	objApplication.openChildWindow(this, strURL, null);
}

function openVar() 
{
	var strURL = "../Applications_HTML/appWorkflowModelVariableEdit.html";
	strURL += "?mode=update";
	
	// Get unique id(s) for row(s) selected
	var arrUniqueIDs = objApplication.Grids("grdWorkflowModelNodeEdit").getSelectedColumnValue("uniqueid");
	
	for (var i = 0; i < arrUniqueIDs.length; i++) {
		// Open the edit HTML page with this record.
		objApplication.openChildWindow(this, strURL, null);
	}
}

function removeVar() 
{
	// NOTE: This function removes a selected row from the grid.
	
	if (eMsgBox(fl("REMOVESELECTEDITEMS"), vbYesNo, msg_Exclamation, window) == vbNo)
		return;
	
	var uniqueid = grdWorkflowModelNodeEdit.getSelectedColumnValue("uniqueid");
	var arrRows  = grdWorkflowModelNodeEdit.getMatchedRows("uniqueid", uniqueid);
	
	// load the current variable 'xml' into a dom
	var strKey = frmMain.getFieldByRef("type").getValue();
	var strVarData = window.opener.getNodeProperty(strKey, "variables");
	
	if (strVarData != "")
	{
		var objXML = objApplication.createXMLDocument();
		objXML.loadXML(strVarData);
		
		var objRootNode = objXML.documentElement();
		var objNodeList = objRootNode.childNodes(); 
		
		for (var i=0; i < objNodeList.length(); i++)
		{
			var name = objNodeList.item(i).getAttribute("name");
			var type = objNodeList.item(i).getAttribute("type");
			var value = objNodeList.item(i).getText();
			
			if ((arrRows[0].getRowValue("variablename") == name) &&
			(arrRows[0].getRowValue("variabletype") == type) &&
			(arrRows[0].getRowValue("variablevalue") == value))
			{
				// remove this from the data
				objXML.documentElement().removeChild(objNodeList.item(i));
				break;
			}
		}
		
		window.opener.setNodeProperty(strKey, "variables", objXML.xml());
		grdWorkflowModelNodeEdit.clear();
		
		populateVariableGrid(strKey);
	}
	else
	{
		var arrUniqueIDs = grdWorkflowModelNodeEdit.getSelectedColumnValue("uniqueid");
		
		// remove this from the data
		for (var i=0; i < arrUniqueIDs.length; i++)
		{
			grdWorkflowModelNodeEdit.deleteRow(arrUniqueIDs[i]);
		}
	}

	m_flgSave = true;
}

function saveNodeProperties() 
{
	// NOTE: This function builds the variable 'xml' from the grid and saves it to the node.
	//		 It also saves the content of Script and Comments and the description of the node.
	  
	var strSaveXML = "<variables>";
	
	var arrRows = grdWorkflowModelNodeEdit.getRows();
	
	for (var i=0; i < arrRows.length; i++)
	{
		strSaveXML = strSaveXML + "<variable name='";
		strSaveXML = strSaveXML + arrRows[i].getRowValue("variablename");
		strSaveXML = strSaveXML + "' type='";
		strSaveXML = strSaveXML + arrRows[i].getRowValue("variabletype");
		if (arrRows[i].getRowValue("variablevalue") == "")
		{
			strSaveXML = strSaveXML + "'/>";
		}
		else
		{
			strSaveXML = strSaveXML + "'>";
			strSaveXML = strSaveXML + arrRows[i].getRowValue("variablevalue");
			strSaveXML = strSaveXML + "</variable>";
		}
	}
	
	strSaveXML = strSaveXML + "</variables>";
	
	var strKey = frmMain.getFieldByRef("type").getValue();
	window.opener.setNodeProperty(strKey, "variables", 	strSaveXML);
	window.opener.setNodeProperty(strKey, "name", frmMain.getFieldByRef("description").getValue());
	window.opener.setNodeProperty(strKey, "script", txtScript.value);
	window.opener.setNodeProperty(strKey, "comments", txtComment.value);
	var useTx = false;
	if (frmTx.getHTMLFieldByRef("runintx").checked == true) {
		useTx = true;
	}
		
	window.opener.setNodeProperty(strKey, "new-transaction", useTx);
	
	
	m_flgSave = false;
	window.close();
	
}

function window_onbeforeunload()
{
	if (m_flgSave)
	{
		if (eMsgBox(fl("SAVECHANGES"), vbYesNo, msg_Exclamation, window) == vbYes)
			saveNodeProperties();
	}
	
	window.close();
}

function window_onresize() 
{
	// NOTE: This function deals with any internal resizing that should take place when the user
	//		 resizes the window.
	
	// Resize grdWorkflowModelNodeEdit
	grdWorkflowModelNodeEdit.setHeight("100%", 130);
	grdWorkflowModelNodeEdit.setWidth("100%", 55);
	// Resize txtScript
	setTextAreaHeight(txtScript, "100%", 100);
	setTextAreaWidth(txtScript, "100%", 50);
	// Resize txtComments
	setTextAreaHeight(txtComment, "100%", 90);
	setTextAreaWidth(txtComment, "100%", 50);
}

function setTextAreaHeight(TA, strHeight, strAdjustment)
{
	// NOTE: This function sets the height of a given text area (TA) to a given height percentage (strHeight).
	//		 Any adjustment to be made is passed through as strAdjustment.  This adjustment will give the
	//		 text area a snug fit with the bottom of the window.
	
	var intAdjustment;
	var rowHeight = 15;

	if (strAdjustment == "")
		intAdjustment = 0;
	else
		intAdjustment = parseInt(strAdjustment);

	if (strHeight.indexOf("%") != -1)
	{
		var strPercentValue = parseInt(strHeight);
		var strHeight = ((document.body.offsetHeight * strPercentValue / 100) - intAdjustment);
	}
	
	// Check for negative height.
	if ((strHeight / rowHeight) < 1)
		return;
		
	TA.rows = strHeight / rowHeight;
}

function setTextAreaWidth(TA, strWidth, strAdjustment) {
	
	// NOTE: This function sets the width of a given text area (TA) to a given width percentage (strWidth).
	//		 Any adjustment to be made is passed through as strAdjustment.  This adjustment will give the
	//		 text area a snug fit with the right-hand side of the window.
	
	var intAdjustment;
	var colWidth = 5;

	if (strAdjustment == "")
		intAdjustment = 0;
	else
		intAdjustment = parseInt(strAdjustment);

	if (strWidth.indexOf("%") != -1)
	{
		var strPercentValue = parseInt(strWidth);
		
		strWidth = ((document.body.offsetWidth * strPercentValue / 100) - intAdjustment);
	}

	// Check for negative width.
	if ((strWidth / colWidth) < 1)
		return;
		
	TA.cols = strWidth / colWidth;
}

function addVariableToGrid(strXML)
{
	// NOTE: This function adds the variable, passed through as strXML, to the grid.
	
	var i = grdWorkflowModelNodeEdit.getRowCount();
	
	var objXML = objApplication.createXMLDocument();
	objXML.loadXML(strXML);
	
	var strName = objXML.getAttribute("name");
	var strType = objXML.getAttribute("type");
	var strValue = objXML.getText();
	
	grdWorkflowModelNodeEdit.insertRow(etc_AFTER, -1, i++, strName, strType, strValue);
	
	m_flgSave = true;
}

function setSaveFlag()
{
	m_flgSave = true;
}

//]]></SCRIPT>

<META name=GENERATOR content="MSHTML 11.00.10570.1001"></HEAD>
<BODY onclick=appTrans_mainBodyFTEvent(event) 
ondblclick=appTrans_mainBodyFTEvent(event) onresize=localResize() 
ondragover="event.returnValue = false; event.cancelBubble = true;" 
id=mainBodyTag class=mainBody onload=localSetup() 
onkeydown=appTrans_mainBodyKeyDown(event) 
onbeforeunload=appTrans_onbeforeunload() onunload=appTrans_onunload() 
compId="appWorkflowModelNodeEdit.xml"><IFRAME id=ContextMenuElement1 
class=ContextMenu style="POSITION: absolute; Z-INDEX: 500; DISPLAY: none" 
marginHeight=0 src="appWorkflowModelNodeEdit_files/htmContextMenuPage.htm" 
frameBorder=0 name=ContextMenuElement1 marginWidth=0 
scrolling=no></IFRAME><IFRAME id=ContextMenuElement2 class=ContextMenu 
style="POSITION: absolute; Z-INDEX: 500; DISPLAY: none" marginHeight=0 
src="appWorkflowModelNodeEdit_files/htmContextMenuPage.htm" frameBorder=0 
name=ContextMenuElement2 marginWidth=0 scrolling=no></IFRAME><IFRAME 
id=ContextMenuElement3 class=ContextMenu 
style="POSITION: absolute; Z-INDEX: 500; DISPLAY: none" marginHeight=0 
src="appWorkflowModelNodeEdit_files/htmContextMenuPage.htm" frameBorder=0 
name=ContextMenuElement3 marginWidth=0 scrolling=no></IFRAME><IFRAME 
onblur="this.style.display='none';" id=ctlDatePicker class=DatePickerPage 
style="DISPLAY: none" marginHeight=0 src="about:blank" frameBorder=0 
name=ctlDatePicker marginWidth=0 scrolling=no> </IFRAME><IFRAME 
id=ctlComboBoxFrame 
style="POSITION: absolute; LEFT: 0px; Z-INDEX: 399; DISPLAY: none; TOP: 0px" 
marginHeight=0 src="about:blank" frameBorder=0 name=ctlComboBoxFrame 
marginWidth=0 scrolling=no> </IFRAME>
<DIV onblur=appTrans_doComboOnBlur(); id=ctlComboBox class=ComboBoxPage 
onkeydown=appTrans_doComboOnKeyDown(); 
style="PADDING-LEFT: 2px; Z-INDEX: 400; PADDING-RIGHT: 2px; VISIBILITY: hidden" 
name="ctlComboBox"></DIV>
<DIV id=bodyDiv style="DISPLAY: none">
<TABLE 
style="HEIGHT: 99%; WIDTH: 100%; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px" 
cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR style="HEIGHT: 100%; WIDTH: 100%" vAlign=top>
    <TD id=applicationTD vAlign=top>
      <TABLE 
      style="HEIGHT: 100%; WIDTH: 100%; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px" 
      cellSpacing=0 cellPadding=0>
        <TBODY>
        <TR class=control-wrapper style="WIDTH: 100%">
          <TD vAlign=top>
            <TABLE cellSpacing=0 cellPadding=0>
              <TBODY>
              <TR nowrap="true">
                <TD vAlign=bottom>
                  <DIV class=toolbar-start></DIV></TD>
                <TD>
                  <DIV class=Toolbar>
                  <TABLE id=tlbtblMain class=ToolbarTable cellSpacing=0 
                  cellPadding=0>
                    <TBODY>
                    <TR vAlign=top>
                      <TD 
                      onclick="try {this.focus();} catch (objError) {}; Toolbar_fireFunction('saveNodeProperties()', this, event)" 
                      tabIndex=1 
                      onkeypress="if (event.keyCode == 32) this.click();" 
                      onmouseover=tblMain.mouseover(this) 
                      onmouseout=tblMain.mouseout(this) id=btnSave 
                      title="Save node properties" class=toolbar-button 
                      accessKey=S noWrap toolbargroup="tblMain" 
                      unselectable="on"><IMG class=toolbar-button-image 
                        src="appWorkflowModelNodeEdit_files/gifSave.gif" 
                        align=absMiddle> <LABEL class=toolbar-button-label 
                        unselectable="on">Save and Close</LABEL> 
                  </TD></TR></TBODY></TABLE></DIV></TD>
                <TD vAlign=bottom>
                  <DIV class=toolbar-end></DIV></TD></TR>
              <TR height=1>
                <TD 
                style="backgroung-image: url(http://CT-US-SQL01/efacs/English/GIF/gifToolbarEndUnderline.gif)">
                <TD 
                style="backgroung-image: url(http://CT-US-SQL01/efacs/English/GIF/gifToolbarEndUnderline.gif)">
                <TD></TD></TR></TBODY></TABLE></TD></TR>
        <TR class=control-wrapper style="WIDTH: 100%">
          <TD vAlign=top><IFRAME id=frmfrmMain class=form style="WIDTH: 100%" 
            marginHeight=0 
            src="appWorkflowModelNodeEdit_files/FormProcessorServlet6F0OP14D.htm" 
            frameBorder=0 allowTransparency name=frmMain_iframe marginWidth=0 
            scrolling=no>
		.</IFRAME></TD></TR>
        <TR class=control-wrapper style="HEIGHT: 100%; WIDTH: 100%">
          <TD vAlign=top>
            <TABLE id=tabdtabdHeader class=tabbeddialog 
            onkeydown=tabdHeader.doOnKeyDown(event) style="HEIGHT: 99%" 
            cellSpacing=0 cellPadding=0 width="100%" name="tabdtabdHeader">
              <THEAD>
              <TR>
                <TD>
                  <TABLE cellSpacing=0 cellPadding=0>
                    <TBODY>
                    <TR>
                      <TD onclick=tabdHeader.switchPage(this) id=tabScript 
                      title="Edit script" class="tabdActive tabdActiveBorder" 
                      style="PADDING-TOP: 0px" unselectable="on">
                        <DIV onmouseover=TabbedDialog_mouseover(this) 
                        onmouseout=TabbedDialog_mouseout(this) id=lbltabScript 
                        class=tabButton noWrap><LABEL class=toolbar-button-label 
                        style="HEIGHT: 16px; PADDING-TOP: 1px; PADDING-LEFT: 7px; MARGIN: 0px; PADDING-RIGHT: 5px">Script</LABEL> 
                        </DIV></TD>
                      <TD class=Spacer><SPAN 
                      style="MARGIN-RIGHT: 5px"></SPAN></TD>
                      <TD onclick=tabdHeader.switchPage(this) id=tabComments 
                      title="Edit comments" class=tabdInactive 
                      style="PADDING-TOP: 0px" unselectable="on">
                        <DIV onmouseover=TabbedDialog_mouseover(this) 
                        onmouseout=TabbedDialog_mouseout(this) id=lbltabComments 
                        class=tabButton noWrap><LABEL class=toolbar-button-label 
                        style="HEIGHT: 16px; PADDING-TOP: 1px; PADDING-LEFT: 7px; MARGIN: 0px; PADDING-RIGHT: 5px">Comments</LABEL> 
                        </DIV></TD>
                      <TD class=Spacer><SPAN 
                      style="MARGIN-RIGHT: 5px"></SPAN></TD>
                      <TD onclick=tabdHeader.switchPage(this) id=tabNodes 
                      title="Variable declaration" class=tabdInactive 
                      style="PADDING-TOP: 0px" unselectable="on">
                        <DIV onmouseover=TabbedDialog_mouseover(this) 
                        onmouseout=TabbedDialog_mouseout(this) id=lbltabNodes 
                        class=tabButton noWrap><LABEL class=toolbar-button-label 
                        style="HEIGHT: 16px; PADDING-TOP: 1px; PADDING-LEFT: 7px; MARGIN: 0px; PADDING-RIGHT: 5px">Node 
                        variables</LABEL> </DIV></TD>
                      <TD class=tabdNoTab width="100%"><SPAN 
                        style="MARGIN-LEFT: 1px"></SPAN></TD></TR></TBODY></TABLE></TD></TR></THEAD>
              <TBODY>
              <TR style="HEIGHT: 100%; WIDTH: 100%" name="TabRow">
                <TD class=tabdContent vAlign=top><TEXTAREA onchange=setSaveFlag() id=txtScript rows=1 cols=1 size="30" description="Logic" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">x</TEXTAREA> 
                  <IFRAME id=frmfrmTx class=form style="WIDTH: 100%" 
                  marginHeight=0 
                  src="appWorkflowModelNodeEdit_files/FormProcessorServlet.htm" 
                  frameBorder=0 allowTransparency name=frmTx_iframe 
                  marginWidth=0 scrolling=no>
		.</IFRAME></TD></TR>
              <TR style="HEIGHT: 100%; WIDTH: 100%; DISPLAY: none" 
name="TabRow">
                <TD class=tabdContent vAlign=top><TEXTAREA onchange=setSaveFlag() id=txtComment rows=1 cols=1 size="30" description="Comments" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">x</TEXTAREA> 
                </TD></TR>
              <TR style="HEIGHT: 100%; WIDTH: 100%; DISPLAY: none" 
name="TabRow">
                <TD class=tabdContent vAlign=top>
                  <TABLE cellSpacing=0 cellPadding=0>
                    <TBODY>
                    <TR nowrap="true">
                      <TD vAlign=bottom>
                        <DIV class=toolbar-start></DIV></TD>
                      <TD>
                        <DIV class=Toolbar>
                        <TABLE id=tlbtlbVariable class=ToolbarTable 
                        cellSpacing=0 cellPadding=0>
                          <TBODY>
                          <TR vAlign=top>
                            <TD 
                            onclick="try {this.focus();} catch (objError) {}; Toolbar_fireFunction('newVar()', this, event)" 
                            tabIndex=1 
                            onkeypress="if (event.keyCode == 32) this.click();" 
                            onmouseover=tlbVariable.mouseover(this) 
                            onmouseout=tlbVariable.mouseout(this) id=btnNewVar 
                            title="Add a variable" class=toolbar-button 
                            accessKey=N noWrap toolbargroup="tlbVariable" 
                            unselectable="on"><IMG class=toolbar-button-image 
                              src="appWorkflowModelNodeEdit_files/New_Blank_Document_16_n_p.png" 
                              align=absMiddle> <LABEL class=toolbar-button-label 
                              unselectable="on">New</LABEL> </TD>
                            <TD 
                            onclick="try {this.focus();} catch (objError) {}; Toolbar_fireFunction('openVar()', this, event)" 
                            tabIndex=1 
                            onkeypress="if (event.keyCode == 32) this.click();" 
                            onmouseover=tlbVariable.mouseover(this) 
                            onmouseout=tlbVariable.mouseout(this) id=btnOpenVar 
                            title="Open a variable" class=toolbar-button 
                            accessKey=O noWrap toolbargroup="tlbVariable" 
                            unselectable="on"><IMG class=toolbar-button-image 
                              src="appWorkflowModelNodeEdit_files/Folder_Open_Oblique_16_n_p.png" 
                              align=absMiddle> <LABEL class=toolbar-button-label 
                              unselectable="on">Open</LABEL> </TD>
                            <TD 
                            onclick="try {this.focus();} catch (objError) {}; Toolbar_fireFunction('removeVar()', this, event)" 
                            tabIndex=1 
                            onkeypress="if (event.keyCode == 32) this.click();" 
                            onmouseover=tlbVariable.mouseover(this) 
                            onmouseout=tlbVariable.mouseout(this) 
                            id=btnRemoveVar title="Remove a variable" 
                            class=toolbar-button accessKey=R noWrap 
                            toolbargroup="tlbVariable" unselectable="on"><IMG 
                              class=toolbar-button-image 
                              src="appWorkflowModelNodeEdit_files/Blue_Delete_16_n_p.png" 
                              align=absMiddle> <LABEL class=toolbar-button-label 
                              unselectable="on">Remove</LABEL> 
                        </TD></TR></TBODY></TABLE></DIV></TD>
                      <TD vAlign=bottom>
                        <DIV class=toolbar-end></DIV></TD></TR>
                    <TR height=1>
                      <TD 
                      style="backgroung-image: url(http://CT-US-SQL01/efacs/English/GIF/gifToolbarEndUnderline.gif)">
                      <TD 
                      style="backgroung-image: url(http://CT-US-SQL01/efacs/English/GIF/gifToolbarEndUnderline.gif)">
                      <TD></TD></TR></TBODY></TABLE>
                  <DIV id=grdDivHeader class=GridDivHeader 
                  style="DISPLAY: none"><LABEL id=grdTitleLabel><SPAN 
                  id=grdTitleSpan>&amp;nbsp;</SPAN> </LABEL></DIV>
                  <DIV id=grdDivWrapper class=NoGridDivWrapper>
                  <DIV tabIndex=1 onfocus="this.hasFocus = true" 
                  onblur="this.hasFocus = false" id=grdgrdWorkflowModelNodeEdit 
                  class=GridDiv onkeydown=et_doKeyDown()>&amp;nbsp; 
                </DIV></DIV></TD></TR></TBODY></TABLE></TD></TR>
        <TR style="HEIGHT: 100%; WIDTH: 100%">
          <TD></TD></TR></TBODY></TABLE></TD></TR>
  <TR vAlign=bottom>
    <TD id=statusBarTD style="HEIGHT: 1px">
      <TABLE id=statusbar class=StatusBar cellSpacing=0 cellPadding=0>
        <TBODY>
        <TR>
          <TD id=sbmessage noWrap>Ready</TD>
          <TD id=sbprinter noWrap>printer1</TD>
          <TD id=sbuser noWrap>JKH</TD>
          <TD id=sbcompany noWrap>ABC 
  Engineering</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></DIV></BODY></HTML>
